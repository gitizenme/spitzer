// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Spitzer.Models;
//
//    var nasaMediaLibrary = NasaMediaLibrary.FromJson(jsonString);


using System;
using System.Collections.Generic;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Spitzer.Models.NasaMedia
{
    public partial class NasaMediaLibrary
    {
        [JsonProperty("collection")]
        public Collection Collection { get; set; }
    }

    public partial class Collection
    {
        [JsonProperty("metadata")]
        public Metadata Metadata { get; set; }

        [JsonProperty("href")]
        public Uri Href { get; set; }

        [JsonProperty("links")]
        public List<CollectionLink> Links { get; set; }

        [JsonProperty("version")]
        public string Version { get; set; }

        [JsonProperty("items")]
        public List<MediaItem> Items { get; set; }
    }

    public partial class MediaItem
    {
        [JsonProperty("href")]
        public Uri Href { get; set; }

        [JsonProperty("links")]
        public List<ItemLink> Links { get; set; }

        [JsonProperty("data")]
        public List<Datum> Data { get; set; }
    }

    public partial class Datum
    {
        [JsonProperty("description_508")]
        public string Description508 { get; set; }

        [JsonProperty("center")]
        public Center Center { get; set; }

        [JsonProperty("secondary_creator")]
        public string SecondaryCreator { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("date_created")]
        public DateTimeOffset DateCreated { get; set; }

        [JsonProperty("keywords")]
        public List<string> Keywords { get; set; }

        [JsonProperty("nasa_id")]
        public string NasaId { get; set; }

        [JsonProperty("media_type")]
        public MediaType MediaType { get; set; }
    }

    public partial class ItemLink
    {
        [JsonProperty("rel")]
        public Rel Rel { get; set; }

        [JsonProperty("href")]
        public Uri Href { get; set; }

        [JsonProperty("render")]
        public MediaType Render { get; set; }
    }

    public partial class CollectionLink
    {
        [JsonProperty("rel")]
        public string Rel { get; set; }

        [JsonProperty("prompt")]
        public string Prompt { get; set; }

        [JsonProperty("href")]
        public Uri Href { get; set; }
    }

    public partial class Metadata
    {
        [JsonProperty("total_hits")]
        public long TotalHits { get; set; }
    }

    public enum Center { Jpl };

    public enum MediaType { Image };

    public enum Rel { Preview };

    public partial class NasaMediaLibrary
    {
        public static NasaMediaLibrary FromJson(string json) => JsonConvert.DeserializeObject<NasaMediaLibrary>(json, NasaMedia.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this NasaMediaLibrary self) => JsonConvert.SerializeObject(self, NasaMedia.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Formatting = Formatting.Indented,
            Converters =
            {
                CenterConverter.Singleton,
                MediaTypeConverter.Singleton,
                RelConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class CenterConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Center) || t == typeof(Center?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "JPL")
            {
                return Center.Jpl;
            }
            throw new Exception("Cannot unmarshal type Center");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Center)untypedValue;
            if (value == Center.Jpl)
            {
                serializer.Serialize(writer, "JPL");
                return;
            }
            throw new Exception("Cannot marshal type Center");
        }

        public static readonly CenterConverter Singleton = new CenterConverter();
    }

    internal class MediaTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MediaType) || t == typeof(MediaType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "image")
            {
                return MediaType.Image;
            }
            throw new Exception("Cannot unmarshal type MediaType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (MediaType)untypedValue;
            if (value == MediaType.Image)
            {
                serializer.Serialize(writer, "image");
                return;
            }
            throw new Exception("Cannot marshal type MediaType");
        }

        public static readonly MediaTypeConverter Singleton = new MediaTypeConverter();
    }

    internal class RelConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Rel) || t == typeof(Rel?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "preview")
            {
                return Rel.Preview;
            }
            throw new Exception("Cannot unmarshal type Rel");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Rel)untypedValue;
            if (value == Rel.Preview)
            {
                serializer.Serialize(writer, "preview");
                return;
            }
            throw new Exception("Cannot marshal type Rel");
        }

        public static readonly RelConverter Singleton = new RelConverter();
    }
}
