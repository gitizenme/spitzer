// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Spitzer.Models;
//
//    var imageMetaData = ImageMetaData.FromJson(jsonString);

namespace Spitzer.Models.ImageMetadata
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ImageMetaData
    {
        [JsonProperty("File:FileName")] public string FileFileName { get; set; }

        [JsonProperty("EXIF:ColorSpace")] public string ExifColorSpace { get; set; }

        [JsonProperty("JFIF:YResolution")] public long JfifYResolution { get; set; }

        [JsonProperty("AVAIL:MediaType")] public string AvailMediaType { get; set; }

        [JsonProperty("File:FilePermissions")] public string FileFilePermissions { get; set; }

        [JsonProperty("File:ColorComponents")] public long FileColorComponents { get; set; }

        [JsonProperty("File:CurrentIPTCDigest")]
        public string FileCurrentIptcDigest { get; set; }

        [JsonProperty("SourceFile")] public string SourceFile { get; set; }

        [JsonProperty("EXIF:FlashpixVersion")] public string ExifFlashpixVersion { get; set; }

        [JsonProperty("File:FileTypeExtension")]
        public string FileFileTypeExtension { get; set; }

        [JsonProperty("AVAIL:NASAID")] public string AvailNasaid { get; set; }

        [JsonProperty("File:MIMEType")] public string FileMimeType { get; set; }

        [JsonProperty("JFIF:XResolution")] public long JfifXResolution { get; set; }

        [JsonProperty("File:YCbCrSubSampling")]
        public string FileYCbCrSubSampling { get; set; }

        [JsonProperty("File:BitsPerSample")] public long FileBitsPerSample { get; set; }

        [JsonProperty("EXIF:ResolutionUnit")] public string ExifResolutionUnit { get; set; }

        [JsonProperty("XMP:DateCreated")] public string XmpDateCreated { get; set; }

        [JsonProperty("XMP:Credit")] public string XmpCredit { get; set; }

        [JsonProperty("EXIF:ExifVersion")] public string ExifExifVersion { get; set; }

        [JsonProperty("AVAIL:Keywords")] public List<string> AvailKeywords { get; set; }

        [JsonProperty("File:FileAccessDate")] public string FileFileAccessDate { get; set; }

        [JsonProperty("File:ImageWidth")] public long FileImageWidth { get; set; }

        [JsonProperty("AVAIL:Title")] public string AvailTitle { get; set; }

        [JsonProperty("XMP:Description")] public string XmpDescription { get; set; }

        [JsonProperty("XMP:Center")] public string XmpCenter { get; set; }

        [JsonProperty("EXIF:YCbCrPositioning")]
        public string ExifYCbCrPositioning { get; set; }

        [JsonProperty("EXIF:ComponentsConfiguration")]
        public string ExifComponentsConfiguration { get; set; }

        [JsonProperty("EXIF:CreateDate")] public string ExifCreateDate { get; set; }

        [JsonProperty("AVAIL:Owner")] public string AvailOwner { get; set; }

        [JsonProperty("AVAIL:Description508")] public string AvailDescription508 { get; set; }

        [JsonProperty("File:ExifByteOrder")] public string FileExifByteOrder { get; set; }

        [JsonProperty("AVAIL:Center")] public string AvailCenter { get; set; }

        [JsonProperty("AVAIL:Photographer")] public string AvailPhotographer { get; set; }

        [JsonProperty("JFIF:JFIFVersion")] public double JfifJfifVersion { get; set; }

        [JsonProperty("Composite:ImageSize")] public string CompositeImageSize { get; set; }

        [JsonProperty("File:Directory")] public string FileDirectory { get; set; }

        [JsonProperty("EXIF:YResolution")] public long ExifYResolution { get; set; }

        [JsonProperty("AVAIL:SecondaryCreator")]
        public string AvailSecondaryCreator { get; set; }

        [JsonProperty("XMP:Nasa_id")] public string XmpNasaId { get; set; }

        [JsonProperty("EXIF:XResolution")] public long ExifXResolution { get; set; }

        [JsonProperty("File:FileInodeChangeDate")]
        public string FileFileInodeChangeDate { get; set; }

        [JsonProperty("File:FileSize")] public string FileFileSize { get; set; }

        [JsonProperty("XMP:Createdate")] public string XmpCreatedate { get; set; }

        [JsonProperty("XMP:ImageDescription")] public string XmpImageDescription { get; set; }

        [JsonProperty("EXIF:ImageDescription")]
        public string ExifImageDescription { get; set; }

        [JsonProperty("AVAIL:Album")] public string AvailAlbum { get; set; }

        [JsonProperty("ExifTool:ExifToolVersion")]
        public double ExifToolExifToolVersion { get; set; }

        [JsonProperty("XMP:XMPToolkit")] public string XmpXmpToolkit { get; set; }

        [JsonProperty("AVAIL:Description")] public string AvailDescription { get; set; }

        [JsonProperty("XMP:CreateDate")] public string XmpCreateDate { get; set; }

        [JsonProperty("AVAIL:Location")] public string AvailLocation { get; set; }

        [JsonProperty("IPTC:Keywords")] public List<string> IptcKeywords { get; set; }

        [JsonProperty("File:FileModifyDate")] public string FileFileModifyDate { get; set; }

        [JsonProperty("AVAIL:DateCreated")] public string AvailDateCreated { get; set; }

        [JsonProperty("Composite:Megapixels")] public double CompositeMegapixels { get; set; }

        [JsonProperty("XMP:Title")] public string XmpTitle { get; set; }

        [JsonProperty("IPTC:ApplicationRecordVersion")]
        public long IptcApplicationRecordVersion { get; set; }

        [JsonProperty("File:EncodingProcess")] public string FileEncodingProcess { get; set; }

        [JsonProperty("XMP:Source")] public string XmpSource { get; set; }

        [JsonProperty("File:ImageHeight")] public long FileImageHeight { get; set; }

        [JsonProperty("File:FileType")] public string FileFileType { get; set; }

        [JsonProperty("JFIF:ResolutionUnit")] public string JfifResolutionUnit { get; set; }

    }
    


    public partial class ImageMetaData
    {
        public static ImageMetaData FromJson(string json) =>
            JsonConvert.DeserializeObject<ImageMetaData>(json, Spitzer.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ImageMetaData self) =>
            JsonConvert.SerializeObject(self, Spitzer.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter {DateTimeStyles = DateTimeStyles.AssumeUniversal}
            },
        };
    }
}