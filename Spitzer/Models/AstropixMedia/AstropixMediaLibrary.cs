// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Spitzer.Models.AstropixMedia;
//
//    var astropixMediaLibrary = AstropixMediaLibrary.FromJson(jsonString);

using System;
using System.Collections.Generic;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Spitzer.Models.AstropixMedia
{
    public partial class AstropixMediaLibrary
    {
        [JsonProperty("creator")]
        public Creator? Creator { get; set; }

        [JsonProperty("contact_name")]
        public List<ContactNameElement> ContactName { get; set; }

        [JsonProperty("creator_url")]
        public CreatorUrlUnion CreatorUrl { get; set; }

        [JsonProperty("contact_email")]
        public ContactEmail? ContactEmail { get; set; }

        [JsonProperty("contact_telephone")]
        public ContactTelephone? ContactTelephone { get; set; }

        [JsonProperty("contact_address")]
        public ContactAddress? ContactAddress { get; set; }

        [JsonProperty("contact_city")]
        public ContactCity? ContactCity { get; set; }

        [JsonProperty("contact_state_province")]
        public ContactStateProvince? ContactStateProvince { get; set; }

        [JsonProperty("contact_postal_code")]
        public ContactPostalCodeUnion ContactPostalCode { get; set; }

        [JsonProperty("contact_country")]
        public ContactCountry? ContactCountry { get; set; }

        [JsonProperty("usage_rights")]
        public string UsageRights { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("headline")]
        public string Headline { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("subject")]
        public List<string> Subject { get; set; }

        [JsonProperty("object_name")]
        public List<string> ObjectName { get; set; }

        [JsonProperty("distance")]
        public List<string> Distance { get; set; }

        [JsonProperty("distance_notes")]
        public string DistanceNotes { get; set; }

        [JsonProperty("reference_url")]
        public Uri ReferenceUrl { get; set; }

        [JsonProperty("image_credit")]
        public string ImageCredit { get; set; }

        [JsonProperty("image_release_date")]
        public string ImageReleaseDate { get; set; }

        [JsonProperty("image_id")]
        public string ImageId { get; set; }

        [JsonProperty("image_type")]
        public ImageType? ImageType { get; set; }

        [JsonProperty("image_quality")]
        public ImageQuality? ImageQuality { get; set; }

        [JsonProperty("telescope_facility")]
        public List<string> TelescopeFacility { get; set; }

        [JsonProperty("telescope_instrument")]
        public List<string> TelescopeInstrument { get; set; }

        [JsonProperty("spectral_color_assignment")]
        public List<SpectralColorAssignment> SpectralColorAssignment { get; set; }

        [JsonProperty("spectral_band")]
        public List<SpectralBand> SpectralBand { get; set; }

        [JsonProperty("spectral_bandpass")]
        public List<string> SpectralBandpass { get; set; }

        [JsonProperty("spectral_wavelength")]
        public List<string> SpectralWavelength { get; set; }

        [JsonProperty("spectral_notes")]
        public string SpectralNotes { get; set; }

        [JsonProperty("observation_start_time")]
        public List<string> ObservationStartTime { get; set; }

        [JsonProperty("observation_integration_time")]
        public List<string> ObservationIntegrationTime { get; set; }

        [JsonProperty("dataset_id")]
        public List<string> DatasetId { get; set; }

        [JsonProperty("wcs_coordinate_frame")]
        public WcsCoordinateFrame? WcsCoordinateFrame { get; set; }

        [JsonProperty("wcs_equinox")]
        public WcsEquinoxUnion WcsEquinox { get; set; }

        [JsonProperty("wcs_reference_value")]
        public List<string> WcsReferenceValue { get; set; }

        [JsonProperty("wcs_reference_dimension")]
        public List<string> WcsReferenceDimension { get; set; }

        [JsonProperty("wcs_reference_pixel")]
        public List<string> WcsReferencePixel { get; set; }

        [JsonProperty("wcs_scale")]
        public List<string> WcsScale { get; set; }

        [JsonProperty("wcs_rotation")]
        public string WcsRotation { get; set; }

        [JsonProperty("wcs_projection")]
        public WcsProjection? WcsProjection { get; set; }

        [JsonProperty("wcs_quality")]
        public WcsQuality? WcsQuality { get; set; }

        [JsonProperty("wcs_notes")]
        public string WcsNotes { get; set; }

        [JsonProperty("fits_header")]
        public string FitsHeader { get; set; }

        [JsonProperty("publisher")]
        public Publisher? Publisher { get; set; }

        [JsonProperty("publisher_id")]
        public PublisherId PublisherId { get; set; }

        [JsonProperty("resource_id")]
        public string ResourceId { get; set; }

        [JsonProperty("resource_url")]
        public Uri ResourceUrl { get; set; }

        [JsonProperty("related_resources")]
        public List<string> RelatedResources { get; set; }

        [JsonProperty("last_updated")]
        public string LastUpdated { get; set; }

        [JsonProperty("metadata_version")]
        public string MetadataVersion { get; set; }

        [JsonProperty("proposal_id")]
        public List<ProposalIdElement> ProposalId { get; set; }

        [JsonProperty("publication_id")]
        public List<string> PublicationId { get; set; }

        [JsonProperty("image_width")]
        [JsonConverter(typeof(DecodingChoiceConverter))]
        public long ImageWidth { get; set; }

        [JsonProperty("image_height")]
        [JsonConverter(typeof(DecodingChoiceConverter))]
        public long ImageHeight { get; set; }

        [JsonProperty("image_max_boundry")]
        [JsonConverter(typeof(DecodingChoiceConverter))]
        public long ImageMaxBoundry { get; set; }

        [JsonProperty("distance_ly")]
        public string DistanceLy { get; set; }

        [JsonProperty("redshift_z")]
        public string RedshiftZ { get; set; }

        [JsonProperty("astropix_id")]
        public long AstropixId { get; set; }
    }

    public enum ContactAddress { CaltechMs22061200ECaliforniaBlvd, ContactAddress60GardenSt, Empty, KarlSchwarzschildStrasse2, Ms22061200ECaliforniaBlvd, The1200ECaliforniaBlvd, The3700SanMartinDrive, The520EdgemontRoad, The60GardenSt, The7GaussWay };

    public enum ContactCity { Baltimore, Berkeley, Cambrdige, Cambridge, Charlottesville, Empty, GarchingBeiMnchen, GarchingBeiMºNchen, GarchingBeiMünchen, Pasadena };

    public enum ContactCountry { Empty, Germany, Usa };

    public enum ContactEmail { BsaxtonNraoEdu, ConEmail, ContactEmailCxcpubCfaHarvardEdu, CxcpubCfaHarvardEdu, Empty, JohnColosimoGmailCom, LarsEsoOrg, LevayStsciEdu, OutreachNraoEdu, OutreachSslBerkeleyEdu, OutreachStsciEdu };

    public enum ContactNameEnum { AnaMargaridaLopes, AndTheHubbleHeitageTeamStScIAura, Antares, BWhitmoreStScI, BillSaxton, ChandraXRayObservatory, ChandraXRayObservatoryCenter, Empty, Eso, GbrammerGmailCom, HHHeyer, HansHermannHeyer, HenriBoffin, JohnColosimo, MaxAlexander, Nasa, NasaAmesJplCaltechTPyle, NasaJplCaltechNMadhusudhanPrincetonUniversity, NasaJplCaltechTPyleSsc, NasaJplCaltechTPyleSscCaltech, Nrao, NraoAuiNsf, Ohainaut, PalomarTransientFactory, SpaceTelescopeScienceInstitut, SpaceTelescopeScienceInstituteOfficeOfPublicOutreach, SpitzerSpaceTelescope, StScI, TheEsaEsoNasaFitsLiberator, WwwSpitzerCaltechEdu, ZLevay, ZeutschelOmniscan11, ZoltanGLevay };

    public enum ContactPostalCodeEnum { D85748, Empty, The012138, The02138 };

    public enum ContactStateProvince { Ca, ContactStateProvinceCa, Empty, Ma, Md, None, Virginia };

    public enum ContactTelephone { ConTele, ContactTelephone6174967941, Empty, Test, The4103384444, The4103384848, The4103384907, The4342960268, The4908932006306, The6097313088, The6174967941 };

    public enum Creator { ChandraXRayObservatory, EsaHubble, EuropeanSouthernObservatory, GalaxyEvolutinExplorer, GalaxyEvolutionExplorer, Galex, NasaHerschelScienceCenter, NasaPlanckScienceCenter, NraoAuiNsf, NuStarNuclearSpectroscopicTelescopeArray, PalomarTransientFactory, SpitzerScienceCenter, SpitzerSpaceTelescope, StScI, WideFieldInfraredSurveyExplo, WideFieldInfraredSurveyExplorer };

    public enum CreatorUrlEnum { HttpWiseAstroUclaEdu };

    public enum ImageQuality { Good, Moderate };

    public enum ImageType { Artwork, Chart, Collage, Document, Observation, Photograph, Planetary, Simulation };

    public enum ProposalIdEnum { Empty, NasaCxcAndNasaJplCaltech };

    public enum Publisher { ChandraXRayCenter, ChandraXRayObservatory, ChandraXRayObservatoryCenter, ChandraXRayObsevatoryCenter, ChandraXRayTelescope, ChrandraXRayObservatory, Empty, EsaHubble, EuropeanSouthernObservatory, GalaxyEvolutionExplorer, HerschelSpaceObservatory, NasaHerschelScienceCenter, Nhsc, Nrao, NraoAuiNsf, PublisherChandraXRayCenter, PublisherChandraXRayObservatory, PublisherChandraXRayObservatoryCenter, PurpleChandraXRayObservatoryCenter, SpitzerScienceCenter, StScI, Wise, Ztf };

    public enum PublisherId { Chandra, Esahubble, Eso, Galex, Nhsc, Nrao, Nustar, Planck, Spitzer, Stsci, Wise, Ztf };

    public enum SpectralBand { Empty, GammaRay, I, Infrared, Ir, J, Millimeter, MillimeterSubmillimeter, NearInfrared, NearIr, Optical, OpticalAndInfrared, PurpleXRay, Radio, SpectralBandMillimeterSubmillimeter, SpectralBandOptical, SpectralBandRadio, SpectralBandXRay, Submillimeter, Ultraviolet, Undefined, Untraviolet, Uv, V, X, XRay };

    public enum SpectralColorAssignment { Blue, BlueAndDarkGreen, BlueGreen, Cyan, Empty, FullColor, Gold, Grayscale, Green, GreenAndTeal, GreenBlue, Luminence, Luminosity, Magenta, Orange, Pink, PseudoColor, Pseudocolor, Purple, Red, RedAndYellow, SpectralColorAssignmentBlue, SpectralColorAssignmentFullColor, SpectralColorAssignmentGreen, SpectralColorAssignmentPseudocolor, SpectralColorAssignmentRed, SpectralColorAssignmentRedAndYellow, SpectralColorAssignmentWhite, SpectralColorAssignmentYellow, Violet, White, Yellow, YellowOrange, Yelow };

    public enum WcsCoordinateFrame { Fk5, Gal, Icrs };

    public enum WcsEquinoxEnum { B1950, Empty, J200, J2000, J20000, The20000 };

    public enum WcsProjection { Ait, Car, Sin, Tan };

    public enum WcsQuality { Full, Position };

    public partial struct ContactNameElement
    {
        public ContactNameEnum? Enum;
        public Uri PurpleUri;

        public static implicit operator ContactNameElement(ContactNameEnum Enum) => new ContactNameElement { Enum = Enum };
        public static implicit operator ContactNameElement(Uri PurpleUri) => new ContactNameElement { PurpleUri = PurpleUri };
    }

    public partial struct ContactPostalCodeUnion
    {
        public ContactPostalCodeEnum? Enum;
        public long? Integer;

        public static implicit operator ContactPostalCodeUnion(ContactPostalCodeEnum Enum) => new ContactPostalCodeUnion { Enum = Enum };
        public static implicit operator ContactPostalCodeUnion(long Integer) => new ContactPostalCodeUnion { Integer = Integer };
        public bool IsNull => Integer == null && Enum == null;
    }

    public partial struct CreatorUrlUnion
    {
        public CreatorUrlEnum? Enum;
        public Uri PurpleUri;

        public static implicit operator CreatorUrlUnion(CreatorUrlEnum Enum) => new CreatorUrlUnion { Enum = Enum };
        public static implicit operator CreatorUrlUnion(Uri PurpleUri) => new CreatorUrlUnion { PurpleUri = PurpleUri };
        public bool IsNull => Enum == null && PurpleUri == null;
    }

    public partial struct ProposalIdElement
    {
        public ProposalIdEnum? Enum;
        public long? Integer;

        public static implicit operator ProposalIdElement(ProposalIdEnum Enum) => new ProposalIdElement { Enum = Enum };
        public static implicit operator ProposalIdElement(long Integer) => new ProposalIdElement { Integer = Integer };
    }

    public partial struct WcsEquinoxUnion
    {
        public WcsEquinoxEnum? Enum;
        public long? Integer;

        public static implicit operator WcsEquinoxUnion(WcsEquinoxEnum Enum) => new WcsEquinoxUnion { Enum = Enum };
        public static implicit operator WcsEquinoxUnion(long Integer) => new WcsEquinoxUnion { Integer = Integer };
        public bool IsNull => Integer == null && Enum == null;
    }

    public partial class AstropixMediaLibrary
    {
        public static List<AstropixMediaLibrary> FromJson(string json) => JsonConvert.DeserializeObject<List<AstropixMediaLibrary>>(json, NasaMedia.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<AstropixMediaLibrary> self) => JsonConvert.SerializeObject(self, NasaMedia.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ContactAddressConverter.Singleton,
                ContactCityConverter.Singleton,
                ContactCountryConverter.Singleton,
                ContactEmailConverter.Singleton,
                ContactNameElementConverter.Singleton,
                ContactNameEnumConverter.Singleton,
                ContactPostalCodeUnionConverter.Singleton,
                ContactPostalCodeEnumConverter.Singleton,
                ContactStateProvinceConverter.Singleton,
                ContactTelephoneConverter.Singleton,
                CreatorConverter.Singleton,
                CreatorUrlUnionConverter.Singleton,
                CreatorUrlEnumConverter.Singleton,
                ImageQualityConverter.Singleton,
                ImageTypeConverter.Singleton,
                ProposalIdElementConverter.Singleton,
                ProposalIdEnumConverter.Singleton,
                PublisherConverter.Singleton,
                PublisherIdConverter.Singleton,
                SpectralBandConverter.Singleton,
                SpectralColorAssignmentConverter.Singleton,
                WcsCoordinateFrameConverter.Singleton,
                WcsEquinoxUnionConverter.Singleton,
                WcsEquinoxEnumConverter.Singleton,
                WcsProjectionConverter.Singleton,
                WcsQualityConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ContactAddressConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ContactAddress) || t == typeof(ContactAddress?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case " ":
                    return ContactAddress.Empty;
                case "1200 E. California Blvd.":
                    return ContactAddress.The1200ECaliforniaBlvd;
                case "3700 San Martin Drive":
                    return ContactAddress.The3700SanMartinDrive;
                case "520 Edgemont Road":
                    return ContactAddress.The520EdgemontRoad;
                case "60 Garden St.":
                    return ContactAddress.The60GardenSt;
                case "60 Garden st.":
                    return ContactAddress.ContactAddress60GardenSt;
                case "7 Gauss Way":
                    return ContactAddress.The7GaussWay;
                case "Caltech MS 220-6, 1200 E. California Blvd.":
                    return ContactAddress.CaltechMs22061200ECaliforniaBlvd;
                case "Karl-Schwarzschild-Strasse 2":
                    return ContactAddress.KarlSchwarzschildStrasse2;
                case "MS 220-6, 1200 E. California Blvd.":
                    return ContactAddress.Ms22061200ECaliforniaBlvd;
            }
            throw new Exception("Cannot unmarshal type ContactAddress");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ContactAddress)untypedValue;
            switch (value)
            {
                case ContactAddress.Empty:
                    serializer.Serialize(writer, " ");
                    return;
                case ContactAddress.The1200ECaliforniaBlvd:
                    serializer.Serialize(writer, "1200 E. California Blvd.");
                    return;
                case ContactAddress.The3700SanMartinDrive:
                    serializer.Serialize(writer, "3700 San Martin Drive");
                    return;
                case ContactAddress.The520EdgemontRoad:
                    serializer.Serialize(writer, "520 Edgemont Road");
                    return;
                case ContactAddress.The60GardenSt:
                    serializer.Serialize(writer, "60 Garden St.");
                    return;
                case ContactAddress.ContactAddress60GardenSt:
                    serializer.Serialize(writer, "60 Garden st.");
                    return;
                case ContactAddress.The7GaussWay:
                    serializer.Serialize(writer, "7 Gauss Way");
                    return;
                case ContactAddress.CaltechMs22061200ECaliforniaBlvd:
                    serializer.Serialize(writer, "Caltech MS 220-6, 1200 E. California Blvd.");
                    return;
                case ContactAddress.KarlSchwarzschildStrasse2:
                    serializer.Serialize(writer, "Karl-Schwarzschild-Strasse 2");
                    return;
                case ContactAddress.Ms22061200ECaliforniaBlvd:
                    serializer.Serialize(writer, "MS 220-6, 1200 E. California Blvd.");
                    return;
            }
            throw new Exception("Cannot marshal type ContactAddress");
        }

        public static readonly ContactAddressConverter Singleton = new ContactAddressConverter();
    }

    internal class ContactCityConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ContactCity) || t == typeof(ContactCity?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case " ":
                    return ContactCity.Empty;
                case "Baltimore":
                    return ContactCity.Baltimore;
                case "Berkeley":
                    return ContactCity.Berkeley;
                case "Cambrdige":
                    return ContactCity.Cambrdige;
                case "Cambridge":
                    return ContactCity.Cambridge;
                case "Charlottesville":
                    return ContactCity.Charlottesville;
                case "Garching bei Mnchen":
                    return ContactCity.GarchingBeiMnchen;
                case "Garching bei München":
                    return ContactCity.GarchingBeiMünchen;
                case "Garching bei M√ºnchen":
                    return ContactCity.GarchingBeiMºNchen;
                case "Pasadena":
                    return ContactCity.Pasadena;
            }
            throw new Exception("Cannot unmarshal type ContactCity");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ContactCity)untypedValue;
            switch (value)
            {
                case ContactCity.Empty:
                    serializer.Serialize(writer, " ");
                    return;
                case ContactCity.Baltimore:
                    serializer.Serialize(writer, "Baltimore");
                    return;
                case ContactCity.Berkeley:
                    serializer.Serialize(writer, "Berkeley");
                    return;
                case ContactCity.Cambrdige:
                    serializer.Serialize(writer, "Cambrdige");
                    return;
                case ContactCity.Cambridge:
                    serializer.Serialize(writer, "Cambridge");
                    return;
                case ContactCity.Charlottesville:
                    serializer.Serialize(writer, "Charlottesville");
                    return;
                case ContactCity.GarchingBeiMnchen:
                    serializer.Serialize(writer, "Garching bei Mnchen");
                    return;
                case ContactCity.GarchingBeiMünchen:
                    serializer.Serialize(writer, "Garching bei München");
                    return;
                case ContactCity.GarchingBeiMºNchen:
                    serializer.Serialize(writer, "Garching bei M√ºnchen");
                    return;
                case ContactCity.Pasadena:
                    serializer.Serialize(writer, "Pasadena");
                    return;
            }
            throw new Exception("Cannot marshal type ContactCity");
        }

        public static readonly ContactCityConverter Singleton = new ContactCityConverter();
    }

    internal class ContactCountryConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ContactCountry) || t == typeof(ContactCountry?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case " ":
                    return ContactCountry.Empty;
                case "Germany":
                    return ContactCountry.Germany;
                case "USA":
                    return ContactCountry.Usa;
            }
            throw new Exception("Cannot unmarshal type ContactCountry");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ContactCountry)untypedValue;
            switch (value)
            {
                case ContactCountry.Empty:
                    serializer.Serialize(writer, " ");
                    return;
                case ContactCountry.Germany:
                    serializer.Serialize(writer, "Germany");
                    return;
                case ContactCountry.Usa:
                    serializer.Serialize(writer, "USA");
                    return;
            }
            throw new Exception("Cannot marshal type ContactCountry");
        }

        public static readonly ContactCountryConverter Singleton = new ContactCountryConverter();
    }

    internal class ContactEmailConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ContactEmail) || t == typeof(ContactEmail?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case " ":
                    return ContactEmail.Empty;
                case "bsaxton@nrao.edu":
                    return ContactEmail.BsaxtonNraoEdu;
                case "con email":
                    return ContactEmail.ConEmail;
                case "cxcpub@cfa.harvard.edu":
                    return ContactEmail.CxcpubCfaHarvardEdu;
                case "cxcpub@cfa.harvard.edu ":
                    return ContactEmail.ContactEmailCxcpubCfaHarvardEdu;
                case "john.colosimo@gmail.com":
                    return ContactEmail.JohnColosimoGmailCom;
                case "lars@eso.org":
                    return ContactEmail.LarsEsoOrg;
                case "levay@stsci.edu":
                    return ContactEmail.LevayStsciEdu;
                case "outreach@nrao.edu":
                    return ContactEmail.OutreachNraoEdu;
                case "outreach@ssl.berkeley.edu":
                    return ContactEmail.OutreachSslBerkeleyEdu;
                case "outreach@stsci.edu":
                    return ContactEmail.OutreachStsciEdu;
            }
            throw new Exception("Cannot unmarshal type ContactEmail");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ContactEmail)untypedValue;
            switch (value)
            {
                case ContactEmail.Empty:
                    serializer.Serialize(writer, " ");
                    return;
                case ContactEmail.BsaxtonNraoEdu:
                    serializer.Serialize(writer, "bsaxton@nrao.edu");
                    return;
                case ContactEmail.ConEmail:
                    serializer.Serialize(writer, "con email");
                    return;
                case ContactEmail.CxcpubCfaHarvardEdu:
                    serializer.Serialize(writer, "cxcpub@cfa.harvard.edu");
                    return;
                case ContactEmail.ContactEmailCxcpubCfaHarvardEdu:
                    serializer.Serialize(writer, "cxcpub@cfa.harvard.edu ");
                    return;
                case ContactEmail.JohnColosimoGmailCom:
                    serializer.Serialize(writer, "john.colosimo@gmail.com");
                    return;
                case ContactEmail.LarsEsoOrg:
                    serializer.Serialize(writer, "lars@eso.org");
                    return;
                case ContactEmail.LevayStsciEdu:
                    serializer.Serialize(writer, "levay@stsci.edu");
                    return;
                case ContactEmail.OutreachNraoEdu:
                    serializer.Serialize(writer, "outreach@nrao.edu");
                    return;
                case ContactEmail.OutreachSslBerkeleyEdu:
                    serializer.Serialize(writer, "outreach@ssl.berkeley.edu");
                    return;
                case ContactEmail.OutreachStsciEdu:
                    serializer.Serialize(writer, "outreach@stsci.edu");
                    return;
            }
            throw new Exception("Cannot marshal type ContactEmail");
        }

        public static readonly ContactEmailConverter Singleton = new ContactEmailConverter();
    }

    internal class ContactNameElementConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ContactNameElement) || t == typeof(ContactNameElement?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    switch (stringValue)
                    {
                        case "-":
                            return new ContactNameElement { Enum = ContactNameEnum.Empty };
                        case "Ana Margarida Lopes":
                            return new ContactNameElement { Enum = ContactNameEnum.AnaMargaridaLopes };
                        case "Antares":
                            return new ContactNameElement { Enum = ContactNameEnum.Antares };
                        case "B. Whitmore (ST ScI)":
                            return new ContactNameElement { Enum = ContactNameEnum.BWhitmoreStScI };
                        case "Bill Saxton":
                            return new ContactNameElement { Enum = ContactNameEnum.BillSaxton };
                        case "Chandra X-ray Observatory":
                            return new ContactNameElement { Enum = ContactNameEnum.ChandraXRayObservatory };
                        case "Chandra X-ray Observatory Center":
                            return new ContactNameElement { Enum = ContactNameEnum.ChandraXRayObservatoryCenter };
                        case "ESO":
                            return new ContactNameElement { Enum = ContactNameEnum.Eso };
                        case "H.H.Heyer":
                            return new ContactNameElement { Enum = ContactNameEnum.HHHeyer };
                        case "Hans Hermann Heyer":
                            return new ContactNameElement { Enum = ContactNameEnum.HansHermannHeyer };
                        case "Henri Boffin":
                            return new ContactNameElement { Enum = ContactNameEnum.HenriBoffin };
                        case "John Colosimo":
                            return new ContactNameElement { Enum = ContactNameEnum.JohnColosimo };
                        case "Max Alexander":
                            return new ContactNameElement { Enum = ContactNameEnum.MaxAlexander };
                        case "NASA":
                            return new ContactNameElement { Enum = ContactNameEnum.Nasa };
                        case "NASA/Ames/JPL-Caltech/T. Pyle":
                            return new ContactNameElement { Enum = ContactNameEnum.NasaAmesJplCaltechTPyle };
                        case "NASA/JPL-Caltech/N. Madhusudhan (Princeton University)":
                            return new ContactNameElement { Enum = ContactNameEnum.NasaJplCaltechNMadhusudhanPrincetonUniversity };
                        case "NASA/JPL-Caltech/T. Pyle (SSC)":
                            return new ContactNameElement { Enum = ContactNameEnum.NasaJplCaltechTPyleSsc };
                        case "NASA/JPL-Caltech/T. Pyle (SSC/Caltech)":
                            return new ContactNameElement { Enum = ContactNameEnum.NasaJplCaltechTPyleSscCaltech };
                        case "NRAO":
                            return new ContactNameElement { Enum = ContactNameEnum.Nrao };
                        case "NRAO/AUI/NSF":
                            return new ContactNameElement { Enum = ContactNameEnum.NraoAuiNsf };
                        case "Palomar Transient Factory":
                            return new ContactNameElement { Enum = ContactNameEnum.PalomarTransientFactory };
                        case "STScI":
                            return new ContactNameElement { Enum = ContactNameEnum.StScI };
                        case "Space Telescope Science Institut":
                            return new ContactNameElement { Enum = ContactNameEnum.SpaceTelescopeScienceInstitut };
                        case "Space Telescope Science Institute Office of Public Outreach":
                            return new ContactNameElement { Enum = ContactNameEnum.SpaceTelescopeScienceInstituteOfficeOfPublicOutreach };
                        case "Spitzer Space Telescope":
                            return new ContactNameElement { Enum = ContactNameEnum.SpitzerSpaceTelescope };
                        case "The ESA/ESO/NASA FITS Liberator":
                            return new ContactNameElement { Enum = ContactNameEnum.TheEsaEsoNasaFitsLiberator };
                        case "Z. Levay":
                            return new ContactNameElement { Enum = ContactNameEnum.ZLevay };
                        case "Zeutschel Omniscan 11":
                            return new ContactNameElement { Enum = ContactNameEnum.ZeutschelOmniscan11 };
                        case "Zoltan G. Levay":
                            return new ContactNameElement { Enum = ContactNameEnum.ZoltanGLevay };
                        case "and the Hubble Heitage Team (STScI/AURA)":
                            return new ContactNameElement { Enum = ContactNameEnum.AndTheHubbleHeitageTeamStScIAura };
                        case "gbrammer@gmail.com":
                            return new ContactNameElement { Enum = ContactNameEnum.GbrammerGmailCom };
                        case "ohainaut":
                            return new ContactNameElement { Enum = ContactNameEnum.Ohainaut };
                        case "www.spitzer.caltech.edu":
                            return new ContactNameElement { Enum = ContactNameEnum.WwwSpitzerCaltechEdu };
                    }
                    try
                    {
                        var uri = new Uri(stringValue);
                        return new ContactNameElement { PurpleUri = uri };
                    }
                    catch (UriFormatException) { }
                    break;
            }
            throw new Exception("Cannot unmarshal type ContactNameElement");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ContactNameElement)untypedValue;
            if (value.Enum != null)
            {
                switch (value.Enum)
                {
                    case ContactNameEnum.Empty:
                        serializer.Serialize(writer, "-");
                        return;
                    case ContactNameEnum.AnaMargaridaLopes:
                        serializer.Serialize(writer, "Ana Margarida Lopes");
                        return;
                    case ContactNameEnum.Antares:
                        serializer.Serialize(writer, "Antares");
                        return;
                    case ContactNameEnum.BWhitmoreStScI:
                        serializer.Serialize(writer, "B. Whitmore (ST ScI)");
                        return;
                    case ContactNameEnum.BillSaxton:
                        serializer.Serialize(writer, "Bill Saxton");
                        return;
                    case ContactNameEnum.ChandraXRayObservatory:
                        serializer.Serialize(writer, "Chandra X-ray Observatory");
                        return;
                    case ContactNameEnum.ChandraXRayObservatoryCenter:
                        serializer.Serialize(writer, "Chandra X-ray Observatory Center");
                        return;
                    case ContactNameEnum.Eso:
                        serializer.Serialize(writer, "ESO");
                        return;
                    case ContactNameEnum.HHHeyer:
                        serializer.Serialize(writer, "H.H.Heyer");
                        return;
                    case ContactNameEnum.HansHermannHeyer:
                        serializer.Serialize(writer, "Hans Hermann Heyer");
                        return;
                    case ContactNameEnum.HenriBoffin:
                        serializer.Serialize(writer, "Henri Boffin");
                        return;
                    case ContactNameEnum.JohnColosimo:
                        serializer.Serialize(writer, "John Colosimo");
                        return;
                    case ContactNameEnum.MaxAlexander:
                        serializer.Serialize(writer, "Max Alexander");
                        return;
                    case ContactNameEnum.Nasa:
                        serializer.Serialize(writer, "NASA");
                        return;
                    case ContactNameEnum.NasaAmesJplCaltechTPyle:
                        serializer.Serialize(writer, "NASA/Ames/JPL-Caltech/T. Pyle");
                        return;
                    case ContactNameEnum.NasaJplCaltechNMadhusudhanPrincetonUniversity:
                        serializer.Serialize(writer, "NASA/JPL-Caltech/N. Madhusudhan (Princeton University)");
                        return;
                    case ContactNameEnum.NasaJplCaltechTPyleSsc:
                        serializer.Serialize(writer, "NASA/JPL-Caltech/T. Pyle (SSC)");
                        return;
                    case ContactNameEnum.NasaJplCaltechTPyleSscCaltech:
                        serializer.Serialize(writer, "NASA/JPL-Caltech/T. Pyle (SSC/Caltech)");
                        return;
                    case ContactNameEnum.Nrao:
                        serializer.Serialize(writer, "NRAO");
                        return;
                    case ContactNameEnum.NraoAuiNsf:
                        serializer.Serialize(writer, "NRAO/AUI/NSF");
                        return;
                    case ContactNameEnum.PalomarTransientFactory:
                        serializer.Serialize(writer, "Palomar Transient Factory");
                        return;
                    case ContactNameEnum.StScI:
                        serializer.Serialize(writer, "STScI");
                        return;
                    case ContactNameEnum.SpaceTelescopeScienceInstitut:
                        serializer.Serialize(writer, "Space Telescope Science Institut");
                        return;
                    case ContactNameEnum.SpaceTelescopeScienceInstituteOfficeOfPublicOutreach:
                        serializer.Serialize(writer, "Space Telescope Science Institute Office of Public Outreach");
                        return;
                    case ContactNameEnum.SpitzerSpaceTelescope:
                        serializer.Serialize(writer, "Spitzer Space Telescope");
                        return;
                    case ContactNameEnum.TheEsaEsoNasaFitsLiberator:
                        serializer.Serialize(writer, "The ESA/ESO/NASA FITS Liberator");
                        return;
                    case ContactNameEnum.ZLevay:
                        serializer.Serialize(writer, "Z. Levay");
                        return;
                    case ContactNameEnum.ZeutschelOmniscan11:
                        serializer.Serialize(writer, "Zeutschel Omniscan 11");
                        return;
                    case ContactNameEnum.ZoltanGLevay:
                        serializer.Serialize(writer, "Zoltan G. Levay");
                        return;
                    case ContactNameEnum.AndTheHubbleHeitageTeamStScIAura:
                        serializer.Serialize(writer, "and the Hubble Heitage Team (STScI/AURA)");
                        return;
                    case ContactNameEnum.GbrammerGmailCom:
                        serializer.Serialize(writer, "gbrammer@gmail.com");
                        return;
                    case ContactNameEnum.Ohainaut:
                        serializer.Serialize(writer, "ohainaut");
                        return;
                    case ContactNameEnum.WwwSpitzerCaltechEdu:
                        serializer.Serialize(writer, "www.spitzer.caltech.edu");
                        return;
                }
            }
            if (value.PurpleUri != null)
            {
                serializer.Serialize(writer, value.PurpleUri.ToString());
                return;
            }
            throw new Exception("Cannot marshal type ContactNameElement");
        }

        public static readonly ContactNameElementConverter Singleton = new ContactNameElementConverter();
    }

    internal class ContactNameEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ContactNameEnum) || t == typeof(ContactNameEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "-":
                    return ContactNameEnum.Empty;
                case "Ana Margarida Lopes":
                    return ContactNameEnum.AnaMargaridaLopes;
                case "Antares":
                    return ContactNameEnum.Antares;
                case "B. Whitmore (ST ScI)":
                    return ContactNameEnum.BWhitmoreStScI;
                case "Bill Saxton":
                    return ContactNameEnum.BillSaxton;
                case "Chandra X-ray Observatory":
                    return ContactNameEnum.ChandraXRayObservatory;
                case "Chandra X-ray Observatory Center":
                    return ContactNameEnum.ChandraXRayObservatoryCenter;
                case "ESO":
                    return ContactNameEnum.Eso;
                case "H.H.Heyer":
                    return ContactNameEnum.HHHeyer;
                case "Hans Hermann Heyer":
                    return ContactNameEnum.HansHermannHeyer;
                case "Henri Boffin":
                    return ContactNameEnum.HenriBoffin;
                case "John Colosimo":
                    return ContactNameEnum.JohnColosimo;
                case "Max Alexander":
                    return ContactNameEnum.MaxAlexander;
                case "NASA":
                    return ContactNameEnum.Nasa;
                case "NASA/Ames/JPL-Caltech/T. Pyle":
                    return ContactNameEnum.NasaAmesJplCaltechTPyle;
                case "NASA/JPL-Caltech/N. Madhusudhan (Princeton University)":
                    return ContactNameEnum.NasaJplCaltechNMadhusudhanPrincetonUniversity;
                case "NASA/JPL-Caltech/T. Pyle (SSC)":
                    return ContactNameEnum.NasaJplCaltechTPyleSsc;
                case "NASA/JPL-Caltech/T. Pyle (SSC/Caltech)":
                    return ContactNameEnum.NasaJplCaltechTPyleSscCaltech;
                case "NRAO":
                    return ContactNameEnum.Nrao;
                case "NRAO/AUI/NSF":
                    return ContactNameEnum.NraoAuiNsf;
                case "Palomar Transient Factory":
                    return ContactNameEnum.PalomarTransientFactory;
                case "STScI":
                    return ContactNameEnum.StScI;
                case "Space Telescope Science Institut":
                    return ContactNameEnum.SpaceTelescopeScienceInstitut;
                case "Space Telescope Science Institute Office of Public Outreach":
                    return ContactNameEnum.SpaceTelescopeScienceInstituteOfficeOfPublicOutreach;
                case "Spitzer Space Telescope":
                    return ContactNameEnum.SpitzerSpaceTelescope;
                case "The ESA/ESO/NASA FITS Liberator":
                    return ContactNameEnum.TheEsaEsoNasaFitsLiberator;
                case "Z. Levay":
                    return ContactNameEnum.ZLevay;
                case "Zeutschel Omniscan 11":
                    return ContactNameEnum.ZeutschelOmniscan11;
                case "Zoltan G. Levay":
                    return ContactNameEnum.ZoltanGLevay;
                case "and the Hubble Heitage Team (STScI/AURA)":
                    return ContactNameEnum.AndTheHubbleHeitageTeamStScIAura;
                case "gbrammer@gmail.com":
                    return ContactNameEnum.GbrammerGmailCom;
                case "ohainaut":
                    return ContactNameEnum.Ohainaut;
                case "www.spitzer.caltech.edu":
                    return ContactNameEnum.WwwSpitzerCaltechEdu;
            }
            throw new Exception("Cannot unmarshal type ContactNameEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ContactNameEnum)untypedValue;
            switch (value)
            {
                case ContactNameEnum.Empty:
                    serializer.Serialize(writer, "-");
                    return;
                case ContactNameEnum.AnaMargaridaLopes:
                    serializer.Serialize(writer, "Ana Margarida Lopes");
                    return;
                case ContactNameEnum.Antares:
                    serializer.Serialize(writer, "Antares");
                    return;
                case ContactNameEnum.BWhitmoreStScI:
                    serializer.Serialize(writer, "B. Whitmore (ST ScI)");
                    return;
                case ContactNameEnum.BillSaxton:
                    serializer.Serialize(writer, "Bill Saxton");
                    return;
                case ContactNameEnum.ChandraXRayObservatory:
                    serializer.Serialize(writer, "Chandra X-ray Observatory");
                    return;
                case ContactNameEnum.ChandraXRayObservatoryCenter:
                    serializer.Serialize(writer, "Chandra X-ray Observatory Center");
                    return;
                case ContactNameEnum.Eso:
                    serializer.Serialize(writer, "ESO");
                    return;
                case ContactNameEnum.HHHeyer:
                    serializer.Serialize(writer, "H.H.Heyer");
                    return;
                case ContactNameEnum.HansHermannHeyer:
                    serializer.Serialize(writer, "Hans Hermann Heyer");
                    return;
                case ContactNameEnum.HenriBoffin:
                    serializer.Serialize(writer, "Henri Boffin");
                    return;
                case ContactNameEnum.JohnColosimo:
                    serializer.Serialize(writer, "John Colosimo");
                    return;
                case ContactNameEnum.MaxAlexander:
                    serializer.Serialize(writer, "Max Alexander");
                    return;
                case ContactNameEnum.Nasa:
                    serializer.Serialize(writer, "NASA");
                    return;
                case ContactNameEnum.NasaAmesJplCaltechTPyle:
                    serializer.Serialize(writer, "NASA/Ames/JPL-Caltech/T. Pyle");
                    return;
                case ContactNameEnum.NasaJplCaltechNMadhusudhanPrincetonUniversity:
                    serializer.Serialize(writer, "NASA/JPL-Caltech/N. Madhusudhan (Princeton University)");
                    return;
                case ContactNameEnum.NasaJplCaltechTPyleSsc:
                    serializer.Serialize(writer, "NASA/JPL-Caltech/T. Pyle (SSC)");
                    return;
                case ContactNameEnum.NasaJplCaltechTPyleSscCaltech:
                    serializer.Serialize(writer, "NASA/JPL-Caltech/T. Pyle (SSC/Caltech)");
                    return;
                case ContactNameEnum.Nrao:
                    serializer.Serialize(writer, "NRAO");
                    return;
                case ContactNameEnum.NraoAuiNsf:
                    serializer.Serialize(writer, "NRAO/AUI/NSF");
                    return;
                case ContactNameEnum.PalomarTransientFactory:
                    serializer.Serialize(writer, "Palomar Transient Factory");
                    return;
                case ContactNameEnum.StScI:
                    serializer.Serialize(writer, "STScI");
                    return;
                case ContactNameEnum.SpaceTelescopeScienceInstitut:
                    serializer.Serialize(writer, "Space Telescope Science Institut");
                    return;
                case ContactNameEnum.SpaceTelescopeScienceInstituteOfficeOfPublicOutreach:
                    serializer.Serialize(writer, "Space Telescope Science Institute Office of Public Outreach");
                    return;
                case ContactNameEnum.SpitzerSpaceTelescope:
                    serializer.Serialize(writer, "Spitzer Space Telescope");
                    return;
                case ContactNameEnum.TheEsaEsoNasaFitsLiberator:
                    serializer.Serialize(writer, "The ESA/ESO/NASA FITS Liberator");
                    return;
                case ContactNameEnum.ZLevay:
                    serializer.Serialize(writer, "Z. Levay");
                    return;
                case ContactNameEnum.ZeutschelOmniscan11:
                    serializer.Serialize(writer, "Zeutschel Omniscan 11");
                    return;
                case ContactNameEnum.ZoltanGLevay:
                    serializer.Serialize(writer, "Zoltan G. Levay");
                    return;
                case ContactNameEnum.AndTheHubbleHeitageTeamStScIAura:
                    serializer.Serialize(writer, "and the Hubble Heitage Team (STScI/AURA)");
                    return;
                case ContactNameEnum.GbrammerGmailCom:
                    serializer.Serialize(writer, "gbrammer@gmail.com");
                    return;
                case ContactNameEnum.Ohainaut:
                    serializer.Serialize(writer, "ohainaut");
                    return;
                case ContactNameEnum.WwwSpitzerCaltechEdu:
                    serializer.Serialize(writer, "www.spitzer.caltech.edu");
                    return;
            }
            throw new Exception("Cannot marshal type ContactNameEnum");
        }

        public static readonly ContactNameEnumConverter Singleton = new ContactNameEnumConverter();
    }

    internal class ContactPostalCodeUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ContactPostalCodeUnion) || t == typeof(ContactPostalCodeUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return new ContactPostalCodeUnion { };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    switch (stringValue)
                    {
                        case " ":
                            return new ContactPostalCodeUnion { Enum = ContactPostalCodeEnum.Empty };
                        case "012138":
                            return new ContactPostalCodeUnion { Enum = ContactPostalCodeEnum.The012138 };
                        case "02138":
                            return new ContactPostalCodeUnion { Enum = ContactPostalCodeEnum.The02138 };
                        case "D-85748":
                            return new ContactPostalCodeUnion { Enum = ContactPostalCodeEnum.D85748 };
                    }
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return new ContactPostalCodeUnion { Integer = l };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type ContactPostalCodeUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ContactPostalCodeUnion)untypedValue;
            if (value.IsNull)
            {
                serializer.Serialize(writer, null);
                return;
            }
            if (value.Enum != null)
            {
                switch (value.Enum)
                {
                    case ContactPostalCodeEnum.Empty:
                        serializer.Serialize(writer, " ");
                        return;
                    case ContactPostalCodeEnum.The012138:
                        serializer.Serialize(writer, "012138");
                        return;
                    case ContactPostalCodeEnum.The02138:
                        serializer.Serialize(writer, "02138");
                        return;
                    case ContactPostalCodeEnum.D85748:
                        serializer.Serialize(writer, "D-85748");
                        return;
                }
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value.ToString());
                return;
            }
            throw new Exception("Cannot marshal type ContactPostalCodeUnion");
        }

        public static readonly ContactPostalCodeUnionConverter Singleton = new ContactPostalCodeUnionConverter();
    }

    internal class ContactPostalCodeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ContactPostalCodeEnum) || t == typeof(ContactPostalCodeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case " ":
                    return ContactPostalCodeEnum.Empty;
                case "012138":
                    return ContactPostalCodeEnum.The012138;
                case "02138":
                    return ContactPostalCodeEnum.The02138;
                case "D-85748":
                    return ContactPostalCodeEnum.D85748;
            }
            throw new Exception("Cannot unmarshal type ContactPostalCodeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ContactPostalCodeEnum)untypedValue;
            switch (value)
            {
                case ContactPostalCodeEnum.Empty:
                    serializer.Serialize(writer, " ");
                    return;
                case ContactPostalCodeEnum.The012138:
                    serializer.Serialize(writer, "012138");
                    return;
                case ContactPostalCodeEnum.The02138:
                    serializer.Serialize(writer, "02138");
                    return;
                case ContactPostalCodeEnum.D85748:
                    serializer.Serialize(writer, "D-85748");
                    return;
            }
            throw new Exception("Cannot marshal type ContactPostalCodeEnum");
        }

        public static readonly ContactPostalCodeEnumConverter Singleton = new ContactPostalCodeEnumConverter();
    }

    internal class ContactStateProvinceConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ContactStateProvince) || t == typeof(ContactStateProvince?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case " ":
                    return ContactStateProvince.Empty;
                case "CA":
                    return ContactStateProvince.Ca;
                case "Ca":
                    return ContactStateProvince.ContactStateProvinceCa;
                case "MA":
                    return ContactStateProvince.Ma;
                case "MD":
                    return ContactStateProvince.Md;
                case "None":
                    return ContactStateProvince.None;
                case "Virginia":
                    return ContactStateProvince.Virginia;
            }
            throw new Exception("Cannot unmarshal type ContactStateProvince");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ContactStateProvince)untypedValue;
            switch (value)
            {
                case ContactStateProvince.Empty:
                    serializer.Serialize(writer, " ");
                    return;
                case ContactStateProvince.Ca:
                    serializer.Serialize(writer, "CA");
                    return;
                case ContactStateProvince.ContactStateProvinceCa:
                    serializer.Serialize(writer, "Ca");
                    return;
                case ContactStateProvince.Ma:
                    serializer.Serialize(writer, "MA");
                    return;
                case ContactStateProvince.Md:
                    serializer.Serialize(writer, "MD");
                    return;
                case ContactStateProvince.None:
                    serializer.Serialize(writer, "None");
                    return;
                case ContactStateProvince.Virginia:
                    serializer.Serialize(writer, "Virginia");
                    return;
            }
            throw new Exception("Cannot marshal type ContactStateProvince");
        }

        public static readonly ContactStateProvinceConverter Singleton = new ContactStateProvinceConverter();
    }

    internal class ContactTelephoneConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ContactTelephone) || t == typeof(ContactTelephone?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case " ":
                    return ContactTelephone.Empty;
                case "+49 (0) 89 320 06 306":
                    return ContactTelephone.The4908932006306;
                case "410-338-4444":
                    return ContactTelephone.The4103384444;
                case "410-338-4848":
                    return ContactTelephone.The4103384848;
                case "410-338-4907":
                    return ContactTelephone.The4103384907;
                case "434-296-0268":
                    return ContactTelephone.The4342960268;
                case "609-731-3088":
                    return ContactTelephone.The6097313088;
                case "617-496-7941":
                    return ContactTelephone.ContactTelephone6174967941;
                case "617.496.7941":
                    return ContactTelephone.The6174967941;
                case "con tele":
                    return ContactTelephone.ConTele;
                case "test":
                    return ContactTelephone.Test;
            }
            throw new Exception("Cannot unmarshal type ContactTelephone");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ContactTelephone)untypedValue;
            switch (value)
            {
                case ContactTelephone.Empty:
                    serializer.Serialize(writer, " ");
                    return;
                case ContactTelephone.The4908932006306:
                    serializer.Serialize(writer, "+49 (0) 89 320 06 306");
                    return;
                case ContactTelephone.The4103384444:
                    serializer.Serialize(writer, "410-338-4444");
                    return;
                case ContactTelephone.The4103384848:
                    serializer.Serialize(writer, "410-338-4848");
                    return;
                case ContactTelephone.The4103384907:
                    serializer.Serialize(writer, "410-338-4907");
                    return;
                case ContactTelephone.The4342960268:
                    serializer.Serialize(writer, "434-296-0268");
                    return;
                case ContactTelephone.The6097313088:
                    serializer.Serialize(writer, "609-731-3088");
                    return;
                case ContactTelephone.ContactTelephone6174967941:
                    serializer.Serialize(writer, "617-496-7941");
                    return;
                case ContactTelephone.The6174967941:
                    serializer.Serialize(writer, "617.496.7941");
                    return;
                case ContactTelephone.ConTele:
                    serializer.Serialize(writer, "con tele");
                    return;
                case ContactTelephone.Test:
                    serializer.Serialize(writer, "test");
                    return;
            }
            throw new Exception("Cannot marshal type ContactTelephone");
        }

        public static readonly ContactTelephoneConverter Singleton = new ContactTelephoneConverter();
    }

    internal class CreatorConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Creator) || t == typeof(Creator?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Chandra X-ray Observatory":
                    return Creator.ChandraXRayObservatory;
                case "ESA/Hubble":
                    return Creator.EsaHubble;
                case "European Southern Observatory":
                    return Creator.EuropeanSouthernObservatory;
                case "Galaxy Evolutin Explorer":
                    return Creator.GalaxyEvolutinExplorer;
                case "Galaxy Evolution Explorer":
                    return Creator.GalaxyEvolutionExplorer;
                case "Galex":
                    return Creator.Galex;
                case "NASA Herschel Science Center":
                    return Creator.NasaHerschelScienceCenter;
                case "NASA Planck Science Center":
                    return Creator.NasaPlanckScienceCenter;
                case "NRAO/AUI/NSF":
                    return Creator.NraoAuiNsf;
                case "NuSTAR: Nuclear Spectroscopic Telescope Array":
                    return Creator.NuStarNuclearSpectroscopicTelescopeArray;
                case "Palomar Transient Factory":
                    return Creator.PalomarTransientFactory;
                case "STScI":
                    return Creator.StScI;
                case "Spitzer Science Center":
                    return Creator.SpitzerScienceCenter;
                case "Spitzer Space Telescope":
                    return Creator.SpitzerSpaceTelescope;
                case "Wide-field Infrared Survey Explo":
                    return Creator.WideFieldInfraredSurveyExplo;
                case "Wide-field Infrared Survey Explorer":
                    return Creator.WideFieldInfraredSurveyExplorer;
            }
            throw new Exception("Cannot unmarshal type Creator");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Creator)untypedValue;
            switch (value)
            {
                case Creator.ChandraXRayObservatory:
                    serializer.Serialize(writer, "Chandra X-ray Observatory");
                    return;
                case Creator.EsaHubble:
                    serializer.Serialize(writer, "ESA/Hubble");
                    return;
                case Creator.EuropeanSouthernObservatory:
                    serializer.Serialize(writer, "European Southern Observatory");
                    return;
                case Creator.GalaxyEvolutinExplorer:
                    serializer.Serialize(writer, "Galaxy Evolutin Explorer");
                    return;
                case Creator.GalaxyEvolutionExplorer:
                    serializer.Serialize(writer, "Galaxy Evolution Explorer");
                    return;
                case Creator.Galex:
                    serializer.Serialize(writer, "Galex");
                    return;
                case Creator.NasaHerschelScienceCenter:
                    serializer.Serialize(writer, "NASA Herschel Science Center");
                    return;
                case Creator.NasaPlanckScienceCenter:
                    serializer.Serialize(writer, "NASA Planck Science Center");
                    return;
                case Creator.NraoAuiNsf:
                    serializer.Serialize(writer, "NRAO/AUI/NSF");
                    return;
                case Creator.NuStarNuclearSpectroscopicTelescopeArray:
                    serializer.Serialize(writer, "NuSTAR: Nuclear Spectroscopic Telescope Array");
                    return;
                case Creator.PalomarTransientFactory:
                    serializer.Serialize(writer, "Palomar Transient Factory");
                    return;
                case Creator.StScI:
                    serializer.Serialize(writer, "STScI");
                    return;
                case Creator.SpitzerScienceCenter:
                    serializer.Serialize(writer, "Spitzer Science Center");
                    return;
                case Creator.SpitzerSpaceTelescope:
                    serializer.Serialize(writer, "Spitzer Space Telescope");
                    return;
                case Creator.WideFieldInfraredSurveyExplo:
                    serializer.Serialize(writer, "Wide-field Infrared Survey Explo");
                    return;
                case Creator.WideFieldInfraredSurveyExplorer:
                    serializer.Serialize(writer, "Wide-field Infrared Survey Explorer");
                    return;
            }
            throw new Exception("Cannot marshal type Creator");
        }

        public static readonly CreatorConverter Singleton = new CreatorConverter();
    }

    internal class CreatorUrlUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CreatorUrlUnion) || t == typeof(CreatorUrlUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return new CreatorUrlUnion { };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    if (stringValue == " http://wise.astro.ucla.edu")
                    {
                        return new CreatorUrlUnion { Enum = CreatorUrlEnum.HttpWiseAstroUclaEdu };
                    }
                    try
                    {
                        var uri = new Uri(stringValue);
                        return new CreatorUrlUnion { PurpleUri = uri };
                    }
                    catch (UriFormatException) { }
                    break;
            }
            throw new Exception("Cannot unmarshal type CreatorUrlUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (CreatorUrlUnion)untypedValue;
            if (value.IsNull)
            {
                serializer.Serialize(writer, null);
                return;
            }
            if (value.Enum != null)
            {
                if (value.Enum == CreatorUrlEnum.HttpWiseAstroUclaEdu)
                {
                    serializer.Serialize(writer, " http://wise.astro.ucla.edu");
                    return;
                }
            }
            if (value.PurpleUri != null)
            {
                serializer.Serialize(writer, value.PurpleUri.ToString());
                return;
            }
            throw new Exception("Cannot marshal type CreatorUrlUnion");
        }

        public static readonly CreatorUrlUnionConverter Singleton = new CreatorUrlUnionConverter();
    }

    internal class CreatorUrlEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CreatorUrlEnum) || t == typeof(CreatorUrlEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == " http://wise.astro.ucla.edu")
            {
                return CreatorUrlEnum.HttpWiseAstroUclaEdu;
            }
            throw new Exception("Cannot unmarshal type CreatorUrlEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CreatorUrlEnum)untypedValue;
            if (value == CreatorUrlEnum.HttpWiseAstroUclaEdu)
            {
                serializer.Serialize(writer, " http://wise.astro.ucla.edu");
                return;
            }
            throw new Exception("Cannot marshal type CreatorUrlEnum");
        }

        public static readonly CreatorUrlEnumConverter Singleton = new CreatorUrlEnumConverter();
    }

    internal class DecodingChoiceConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return integerValue;
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return l;
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value);
            return;
        }

        public static readonly DecodingChoiceConverter Singleton = new DecodingChoiceConverter();
    }

    internal class ImageQualityConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ImageQuality) || t == typeof(ImageQuality?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Good":
                    return ImageQuality.Good;
                case "Moderate":
                    return ImageQuality.Moderate;
            }
            throw new Exception("Cannot unmarshal type ImageQuality");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ImageQuality)untypedValue;
            switch (value)
            {
                case ImageQuality.Good:
                    serializer.Serialize(writer, "Good");
                    return;
                case ImageQuality.Moderate:
                    serializer.Serialize(writer, "Moderate");
                    return;
            }
            throw new Exception("Cannot marshal type ImageQuality");
        }

        public static readonly ImageQualityConverter Singleton = new ImageQualityConverter();
    }

    internal class ImageTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ImageType) || t == typeof(ImageType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Artwork":
                    return ImageType.Artwork;
                case "Chart":
                    return ImageType.Chart;
                case "Collage":
                    return ImageType.Collage;
                case "Document":
                    return ImageType.Document;
                case "Observation":
                    return ImageType.Observation;
                case "Photograph":
                    return ImageType.Photograph;
                case "Planetary":
                    return ImageType.Planetary;
                case "Simulation":
                    return ImageType.Simulation;
            }
            throw new Exception("Cannot unmarshal type ImageType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ImageType)untypedValue;
            switch (value)
            {
                case ImageType.Artwork:
                    serializer.Serialize(writer, "Artwork");
                    return;
                case ImageType.Chart:
                    serializer.Serialize(writer, "Chart");
                    return;
                case ImageType.Collage:
                    serializer.Serialize(writer, "Collage");
                    return;
                case ImageType.Document:
                    serializer.Serialize(writer, "Document");
                    return;
                case ImageType.Observation:
                    serializer.Serialize(writer, "Observation");
                    return;
                case ImageType.Photograph:
                    serializer.Serialize(writer, "Photograph");
                    return;
                case ImageType.Planetary:
                    serializer.Serialize(writer, "Planetary");
                    return;
                case ImageType.Simulation:
                    serializer.Serialize(writer, "Simulation");
                    return;
            }
            throw new Exception("Cannot marshal type ImageType");
        }

        public static readonly ImageTypeConverter Singleton = new ImageTypeConverter();
    }

    internal class ProposalIdElementConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ProposalIdElement) || t == typeof(ProposalIdElement?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    switch (stringValue)
                    {
                        case " ":
                            return new ProposalIdElement { Enum = ProposalIdEnum.Empty };
                        case "NASA/CXC and NASA/JPL-Caltech":
                            return new ProposalIdElement { Enum = ProposalIdEnum.NasaCxcAndNasaJplCaltech };
                    }
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return new ProposalIdElement { Integer = l };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type ProposalIdElement");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ProposalIdElement)untypedValue;
            if (value.Enum != null)
            {
                switch (value.Enum)
                {
                    case ProposalIdEnum.Empty:
                        serializer.Serialize(writer, " ");
                        return;
                    case ProposalIdEnum.NasaCxcAndNasaJplCaltech:
                        serializer.Serialize(writer, "NASA/CXC and NASA/JPL-Caltech");
                        return;
                }
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value.ToString());
                return;
            }
            throw new Exception("Cannot marshal type ProposalIdElement");
        }

        public static readonly ProposalIdElementConverter Singleton = new ProposalIdElementConverter();
    }

    internal class ProposalIdEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ProposalIdEnum) || t == typeof(ProposalIdEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case " ":
                    return ProposalIdEnum.Empty;
                case "NASA/CXC and NASA/JPL-Caltech":
                    return ProposalIdEnum.NasaCxcAndNasaJplCaltech;
            }
            throw new Exception("Cannot unmarshal type ProposalIdEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ProposalIdEnum)untypedValue;
            switch (value)
            {
                case ProposalIdEnum.Empty:
                    serializer.Serialize(writer, " ");
                    return;
                case ProposalIdEnum.NasaCxcAndNasaJplCaltech:
                    serializer.Serialize(writer, "NASA/CXC and NASA/JPL-Caltech");
                    return;
            }
            throw new Exception("Cannot marshal type ProposalIdEnum");
        }

        public static readonly ProposalIdEnumConverter Singleton = new ProposalIdEnumConverter();
    }

    internal class PublisherConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Publisher) || t == typeof(Publisher?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case " ":
                    return Publisher.Empty;
                case "Chandra X-Ray Center":
                    return Publisher.PublisherChandraXRayCenter;
                case "Chandra X-Ray Observatory":
                    return Publisher.PublisherChandraXRayObservatory;
                case "Chandra X-Ray Observatory Center":
                    return Publisher.PublisherChandraXRayObservatoryCenter;
                case "Chandra X-ray Center":
                    return Publisher.ChandraXRayCenter;
                case "Chandra X-ray Observatory":
                    return Publisher.ChandraXRayObservatory;
                case "Chandra X-ray Observatory Center":
                    return Publisher.ChandraXRayObservatoryCenter;
                case "Chandra X-ray Observatory center":
                    return Publisher.PurpleChandraXRayObservatoryCenter;
                case "Chandra X-ray Obsevatory Center":
                    return Publisher.ChandraXRayObsevatoryCenter;
                case "Chandra X-ray Telescope":
                    return Publisher.ChandraXRayTelescope;
                case "Chrandra X-ray Observatory ":
                    return Publisher.ChrandraXRayObservatory;
                case "ESA/Hubble":
                    return Publisher.EsaHubble;
                case "European Southern Observatory":
                    return Publisher.EuropeanSouthernObservatory;
                case "Galaxy Evolution Explorer":
                    return Publisher.GalaxyEvolutionExplorer;
                case "Herschel Space Observatory":
                    return Publisher.HerschelSpaceObservatory;
                case "NASA Herschel Science Center":
                    return Publisher.NasaHerschelScienceCenter;
                case "NRAO":
                    return Publisher.Nrao;
                case "NRAO/AUI/NSF":
                    return Publisher.NraoAuiNsf;
                case "STScI":
                    return Publisher.StScI;
                case "Spitzer Science Center":
                    return Publisher.SpitzerScienceCenter;
                case "WISE":
                    return Publisher.Wise;
                case "nhsc":
                    return Publisher.Nhsc;
                case "ztf":
                    return Publisher.Ztf;
            }
            throw new Exception("Cannot unmarshal type Publisher");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Publisher)untypedValue;
            switch (value)
            {
                case Publisher.Empty:
                    serializer.Serialize(writer, " ");
                    return;
                case Publisher.PublisherChandraXRayCenter:
                    serializer.Serialize(writer, "Chandra X-Ray Center");
                    return;
                case Publisher.PublisherChandraXRayObservatory:
                    serializer.Serialize(writer, "Chandra X-Ray Observatory");
                    return;
                case Publisher.PublisherChandraXRayObservatoryCenter:
                    serializer.Serialize(writer, "Chandra X-Ray Observatory Center");
                    return;
                case Publisher.ChandraXRayCenter:
                    serializer.Serialize(writer, "Chandra X-ray Center");
                    return;
                case Publisher.ChandraXRayObservatory:
                    serializer.Serialize(writer, "Chandra X-ray Observatory");
                    return;
                case Publisher.ChandraXRayObservatoryCenter:
                    serializer.Serialize(writer, "Chandra X-ray Observatory Center");
                    return;
                case Publisher.PurpleChandraXRayObservatoryCenter:
                    serializer.Serialize(writer, "Chandra X-ray Observatory center");
                    return;
                case Publisher.ChandraXRayObsevatoryCenter:
                    serializer.Serialize(writer, "Chandra X-ray Obsevatory Center");
                    return;
                case Publisher.ChandraXRayTelescope:
                    serializer.Serialize(writer, "Chandra X-ray Telescope");
                    return;
                case Publisher.ChrandraXRayObservatory:
                    serializer.Serialize(writer, "Chrandra X-ray Observatory ");
                    return;
                case Publisher.EsaHubble:
                    serializer.Serialize(writer, "ESA/Hubble");
                    return;
                case Publisher.EuropeanSouthernObservatory:
                    serializer.Serialize(writer, "European Southern Observatory");
                    return;
                case Publisher.GalaxyEvolutionExplorer:
                    serializer.Serialize(writer, "Galaxy Evolution Explorer");
                    return;
                case Publisher.HerschelSpaceObservatory:
                    serializer.Serialize(writer, "Herschel Space Observatory");
                    return;
                case Publisher.NasaHerschelScienceCenter:
                    serializer.Serialize(writer, "NASA Herschel Science Center");
                    return;
                case Publisher.Nrao:
                    serializer.Serialize(writer, "NRAO");
                    return;
                case Publisher.NraoAuiNsf:
                    serializer.Serialize(writer, "NRAO/AUI/NSF");
                    return;
                case Publisher.StScI:
                    serializer.Serialize(writer, "STScI");
                    return;
                case Publisher.SpitzerScienceCenter:
                    serializer.Serialize(writer, "Spitzer Science Center");
                    return;
                case Publisher.Wise:
                    serializer.Serialize(writer, "WISE");
                    return;
                case Publisher.Nhsc:
                    serializer.Serialize(writer, "nhsc");
                    return;
                case Publisher.Ztf:
                    serializer.Serialize(writer, "ztf");
                    return;
            }
            throw new Exception("Cannot marshal type Publisher");
        }

        public static readonly PublisherConverter Singleton = new PublisherConverter();
    }

    internal class PublisherIdConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PublisherId) || t == typeof(PublisherId?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "chandra":
                    return PublisherId.Chandra;
                case "esahubble":
                    return PublisherId.Esahubble;
                case "eso":
                    return PublisherId.Eso;
                case "galex":
                    return PublisherId.Galex;
                case "nhsc":
                    return PublisherId.Nhsc;
                case "nrao":
                    return PublisherId.Nrao;
                case "nustar":
                    return PublisherId.Nustar;
                case "planck":
                    return PublisherId.Planck;
                case "spitzer":
                    return PublisherId.Spitzer;
                case "stsci":
                    return PublisherId.Stsci;
                case "wise":
                    return PublisherId.Wise;
                case "ztf":
                    return PublisherId.Ztf;
            }
            throw new Exception("Cannot unmarshal type PublisherId");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PublisherId)untypedValue;
            switch (value)
            {
                case PublisherId.Chandra:
                    serializer.Serialize(writer, "chandra");
                    return;
                case PublisherId.Esahubble:
                    serializer.Serialize(writer, "esahubble");
                    return;
                case PublisherId.Eso:
                    serializer.Serialize(writer, "eso");
                    return;
                case PublisherId.Galex:
                    serializer.Serialize(writer, "galex");
                    return;
                case PublisherId.Nhsc:
                    serializer.Serialize(writer, "nhsc");
                    return;
                case PublisherId.Nrao:
                    serializer.Serialize(writer, "nrao");
                    return;
                case PublisherId.Nustar:
                    serializer.Serialize(writer, "nustar");
                    return;
                case PublisherId.Planck:
                    serializer.Serialize(writer, "planck");
                    return;
                case PublisherId.Spitzer:
                    serializer.Serialize(writer, "spitzer");
                    return;
                case PublisherId.Stsci:
                    serializer.Serialize(writer, "stsci");
                    return;
                case PublisherId.Wise:
                    serializer.Serialize(writer, "wise");
                    return;
                case PublisherId.Ztf:
                    serializer.Serialize(writer, "ztf");
                    return;
            }
            throw new Exception("Cannot marshal type PublisherId");
        }

        public static readonly PublisherIdConverter Singleton = new PublisherIdConverter();
    }

    internal class SpectralBandConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SpectralBand) || t == typeof(SpectralBand?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "-":
                    return SpectralBand.Empty;
                case "Gamma-ray":
                    return SpectralBand.GammaRay;
                case "I":
                    return SpectralBand.I;
                case "IR":
                    return SpectralBand.Ir;
                case "Infrared":
                    return SpectralBand.Infrared;
                case "J":
                    return SpectralBand.J;
                case "Millimeter":
                    return SpectralBand.Millimeter;
                case "Millimeter/Submillimeter":
                    return SpectralBand.MillimeterSubmillimeter;
                case "Millimeter/submillimeter":
                    return SpectralBand.SpectralBandMillimeterSubmillimeter;
                case "Near-IR":
                    return SpectralBand.NearIr;
                case "Near-Infrared":
                    return SpectralBand.NearInfrared;
                case "Optical":
                    return SpectralBand.Optical;
                case "Optical and Infrared":
                    return SpectralBand.OpticalAndInfrared;
                case "Radio":
                    return SpectralBand.Radio;
                case "Submillimeter":
                    return SpectralBand.Submillimeter;
                case "UV":
                    return SpectralBand.Uv;
                case "Ultraviolet":
                    return SpectralBand.Ultraviolet;
                case "Untraviolet":
                    return SpectralBand.Untraviolet;
                case "V":
                    return SpectralBand.V;
                case "X":
                    return SpectralBand.X;
                case "X-Ray":
                    return SpectralBand.PurpleXRay;
                case "X-ray":
                    return SpectralBand.XRay;
                case "optical":
                    return SpectralBand.SpectralBandOptical;
                case "radio":
                    return SpectralBand.SpectralBandRadio;
                case "undefined":
                    return SpectralBand.Undefined;
                case "x-ray":
                    return SpectralBand.SpectralBandXRay;
            }
            throw new Exception("Cannot unmarshal type SpectralBand");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SpectralBand)untypedValue;
            switch (value)
            {
                case SpectralBand.Empty:
                    serializer.Serialize(writer, "-");
                    return;
                case SpectralBand.GammaRay:
                    serializer.Serialize(writer, "Gamma-ray");
                    return;
                case SpectralBand.I:
                    serializer.Serialize(writer, "I");
                    return;
                case SpectralBand.Ir:
                    serializer.Serialize(writer, "IR");
                    return;
                case SpectralBand.Infrared:
                    serializer.Serialize(writer, "Infrared");
                    return;
                case SpectralBand.J:
                    serializer.Serialize(writer, "J");
                    return;
                case SpectralBand.Millimeter:
                    serializer.Serialize(writer, "Millimeter");
                    return;
                case SpectralBand.MillimeterSubmillimeter:
                    serializer.Serialize(writer, "Millimeter/Submillimeter");
                    return;
                case SpectralBand.SpectralBandMillimeterSubmillimeter:
                    serializer.Serialize(writer, "Millimeter/submillimeter");
                    return;
                case SpectralBand.NearIr:
                    serializer.Serialize(writer, "Near-IR");
                    return;
                case SpectralBand.NearInfrared:
                    serializer.Serialize(writer, "Near-Infrared");
                    return;
                case SpectralBand.Optical:
                    serializer.Serialize(writer, "Optical");
                    return;
                case SpectralBand.OpticalAndInfrared:
                    serializer.Serialize(writer, "Optical and Infrared");
                    return;
                case SpectralBand.Radio:
                    serializer.Serialize(writer, "Radio");
                    return;
                case SpectralBand.Submillimeter:
                    serializer.Serialize(writer, "Submillimeter");
                    return;
                case SpectralBand.Uv:
                    serializer.Serialize(writer, "UV");
                    return;
                case SpectralBand.Ultraviolet:
                    serializer.Serialize(writer, "Ultraviolet");
                    return;
                case SpectralBand.Untraviolet:
                    serializer.Serialize(writer, "Untraviolet");
                    return;
                case SpectralBand.V:
                    serializer.Serialize(writer, "V");
                    return;
                case SpectralBand.X:
                    serializer.Serialize(writer, "X");
                    return;
                case SpectralBand.PurpleXRay:
                    serializer.Serialize(writer, "X-Ray");
                    return;
                case SpectralBand.XRay:
                    serializer.Serialize(writer, "X-ray");
                    return;
                case SpectralBand.SpectralBandOptical:
                    serializer.Serialize(writer, "optical");
                    return;
                case SpectralBand.SpectralBandRadio:
                    serializer.Serialize(writer, "radio");
                    return;
                case SpectralBand.Undefined:
                    serializer.Serialize(writer, "undefined");
                    return;
                case SpectralBand.SpectralBandXRay:
                    serializer.Serialize(writer, "x-ray");
                    return;
            }
            throw new Exception("Cannot marshal type SpectralBand");
        }

        public static readonly SpectralBandConverter Singleton = new SpectralBandConverter();
    }

    internal class SpectralColorAssignmentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SpectralColorAssignment) || t == typeof(SpectralColorAssignment?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "-":
                    return SpectralColorAssignment.Empty;
                case "Blue":
                    return SpectralColorAssignment.Blue;
                case "Blue Green":
                    return SpectralColorAssignment.BlueGreen;
                case "Blue and Dark Green":
                    return SpectralColorAssignment.BlueAndDarkGreen;
                case "Cyan":
                    return SpectralColorAssignment.Cyan;
                case "Full Color":
                    return SpectralColorAssignment.SpectralColorAssignmentFullColor;
                case "Full color":
                    return SpectralColorAssignment.FullColor;
                case "Gold":
                    return SpectralColorAssignment.Gold;
                case "Grayscale":
                    return SpectralColorAssignment.Grayscale;
                case "Green":
                    return SpectralColorAssignment.Green;
                case "Green and Teal":
                    return SpectralColorAssignment.GreenAndTeal;
                case "Green: Blue":
                    return SpectralColorAssignment.GreenBlue;
                case "Luminence":
                    return SpectralColorAssignment.Luminence;
                case "Luminosity":
                    return SpectralColorAssignment.Luminosity;
                case "Magenta":
                    return SpectralColorAssignment.Magenta;
                case "Orange":
                    return SpectralColorAssignment.Orange;
                case "Pink":
                    return SpectralColorAssignment.Pink;
                case "Pseudo-color":
                    return SpectralColorAssignment.PseudoColor;
                case "Pseudocolor":
                    return SpectralColorAssignment.Pseudocolor;
                case "Purple":
                    return SpectralColorAssignment.Purple;
                case "Red":
                    return SpectralColorAssignment.Red;
                case "Red and Yellow":
                    return SpectralColorAssignment.RedAndYellow;
                case "Violet":
                    return SpectralColorAssignment.Violet;
                case "White":
                    return SpectralColorAssignment.SpectralColorAssignmentWhite;
                case "Yellow":
                    return SpectralColorAssignment.Yellow;
                case "Yellow-Orange":
                    return SpectralColorAssignment.YellowOrange;
                case "Yelow":
                    return SpectralColorAssignment.Yelow;
                case "blue":
                    return SpectralColorAssignment.SpectralColorAssignmentBlue;
                case "green":
                    return SpectralColorAssignment.SpectralColorAssignmentGreen;
                case "pseudocolor":
                    return SpectralColorAssignment.SpectralColorAssignmentPseudocolor;
                case "red":
                    return SpectralColorAssignment.SpectralColorAssignmentRed;
                case "red and yellow":
                    return SpectralColorAssignment.SpectralColorAssignmentRedAndYellow;
                case "white":
                    return SpectralColorAssignment.White;
                case "yellow":
                    return SpectralColorAssignment.SpectralColorAssignmentYellow;
            }
            throw new Exception("Cannot unmarshal type SpectralColorAssignment");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SpectralColorAssignment)untypedValue;
            switch (value)
            {
                case SpectralColorAssignment.Empty:
                    serializer.Serialize(writer, "-");
                    return;
                case SpectralColorAssignment.Blue:
                    serializer.Serialize(writer, "Blue");
                    return;
                case SpectralColorAssignment.BlueGreen:
                    serializer.Serialize(writer, "Blue Green");
                    return;
                case SpectralColorAssignment.BlueAndDarkGreen:
                    serializer.Serialize(writer, "Blue and Dark Green");
                    return;
                case SpectralColorAssignment.Cyan:
                    serializer.Serialize(writer, "Cyan");
                    return;
                case SpectralColorAssignment.SpectralColorAssignmentFullColor:
                    serializer.Serialize(writer, "Full Color");
                    return;
                case SpectralColorAssignment.FullColor:
                    serializer.Serialize(writer, "Full color");
                    return;
                case SpectralColorAssignment.Gold:
                    serializer.Serialize(writer, "Gold");
                    return;
                case SpectralColorAssignment.Grayscale:
                    serializer.Serialize(writer, "Grayscale");
                    return;
                case SpectralColorAssignment.Green:
                    serializer.Serialize(writer, "Green");
                    return;
                case SpectralColorAssignment.GreenAndTeal:
                    serializer.Serialize(writer, "Green and Teal");
                    return;
                case SpectralColorAssignment.GreenBlue:
                    serializer.Serialize(writer, "Green: Blue");
                    return;
                case SpectralColorAssignment.Luminence:
                    serializer.Serialize(writer, "Luminence");
                    return;
                case SpectralColorAssignment.Luminosity:
                    serializer.Serialize(writer, "Luminosity");
                    return;
                case SpectralColorAssignment.Magenta:
                    serializer.Serialize(writer, "Magenta");
                    return;
                case SpectralColorAssignment.Orange:
                    serializer.Serialize(writer, "Orange");
                    return;
                case SpectralColorAssignment.Pink:
                    serializer.Serialize(writer, "Pink");
                    return;
                case SpectralColorAssignment.PseudoColor:
                    serializer.Serialize(writer, "Pseudo-color");
                    return;
                case SpectralColorAssignment.Pseudocolor:
                    serializer.Serialize(writer, "Pseudocolor");
                    return;
                case SpectralColorAssignment.Purple:
                    serializer.Serialize(writer, "Purple");
                    return;
                case SpectralColorAssignment.Red:
                    serializer.Serialize(writer, "Red");
                    return;
                case SpectralColorAssignment.RedAndYellow:
                    serializer.Serialize(writer, "Red and Yellow");
                    return;
                case SpectralColorAssignment.Violet:
                    serializer.Serialize(writer, "Violet");
                    return;
                case SpectralColorAssignment.SpectralColorAssignmentWhite:
                    serializer.Serialize(writer, "White");
                    return;
                case SpectralColorAssignment.Yellow:
                    serializer.Serialize(writer, "Yellow");
                    return;
                case SpectralColorAssignment.YellowOrange:
                    serializer.Serialize(writer, "Yellow-Orange");
                    return;
                case SpectralColorAssignment.Yelow:
                    serializer.Serialize(writer, "Yelow");
                    return;
                case SpectralColorAssignment.SpectralColorAssignmentBlue:
                    serializer.Serialize(writer, "blue");
                    return;
                case SpectralColorAssignment.SpectralColorAssignmentGreen:
                    serializer.Serialize(writer, "green");
                    return;
                case SpectralColorAssignment.SpectralColorAssignmentPseudocolor:
                    serializer.Serialize(writer, "pseudocolor");
                    return;
                case SpectralColorAssignment.SpectralColorAssignmentRed:
                    serializer.Serialize(writer, "red");
                    return;
                case SpectralColorAssignment.SpectralColorAssignmentRedAndYellow:
                    serializer.Serialize(writer, "red and yellow");
                    return;
                case SpectralColorAssignment.White:
                    serializer.Serialize(writer, "white");
                    return;
                case SpectralColorAssignment.SpectralColorAssignmentYellow:
                    serializer.Serialize(writer, "yellow");
                    return;
            }
            throw new Exception("Cannot marshal type SpectralColorAssignment");
        }

        public static readonly SpectralColorAssignmentConverter Singleton = new SpectralColorAssignmentConverter();
    }

    internal class WcsCoordinateFrameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(WcsCoordinateFrame) || t == typeof(WcsCoordinateFrame?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "FK5":
                    return WcsCoordinateFrame.Fk5;
                case "GAL":
                    return WcsCoordinateFrame.Gal;
                case "ICRS":
                    return WcsCoordinateFrame.Icrs;
            }
            throw new Exception("Cannot unmarshal type WcsCoordinateFrame");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (WcsCoordinateFrame)untypedValue;
            switch (value)
            {
                case WcsCoordinateFrame.Fk5:
                    serializer.Serialize(writer, "FK5");
                    return;
                case WcsCoordinateFrame.Gal:
                    serializer.Serialize(writer, "GAL");
                    return;
                case WcsCoordinateFrame.Icrs:
                    serializer.Serialize(writer, "ICRS");
                    return;
            }
            throw new Exception("Cannot marshal type WcsCoordinateFrame");
        }

        public static readonly WcsCoordinateFrameConverter Singleton = new WcsCoordinateFrameConverter();
    }

    internal class WcsEquinoxUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(WcsEquinoxUnion) || t == typeof(WcsEquinoxUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return new WcsEquinoxUnion { };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    switch (stringValue)
                    {
                        case " ":
                            return new WcsEquinoxUnion { Enum = WcsEquinoxEnum.Empty };
                        case "2000.0":
                            return new WcsEquinoxUnion { Enum = WcsEquinoxEnum.The20000 };
                        case "B1950":
                            return new WcsEquinoxUnion { Enum = WcsEquinoxEnum.B1950 };
                        case "J200":
                            return new WcsEquinoxUnion { Enum = WcsEquinoxEnum.J200 };
                        case "J2000":
                            return new WcsEquinoxUnion { Enum = WcsEquinoxEnum.J2000 };
                        case "J2000.0":
                            return new WcsEquinoxUnion { Enum = WcsEquinoxEnum.J20000 };
                    }
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return new WcsEquinoxUnion { Integer = l };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type WcsEquinoxUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (WcsEquinoxUnion)untypedValue;
            if (value.IsNull)
            {
                serializer.Serialize(writer, null);
                return;
            }
            if (value.Enum != null)
            {
                switch (value.Enum)
                {
                    case WcsEquinoxEnum.Empty:
                        serializer.Serialize(writer, " ");
                        return;
                    case WcsEquinoxEnum.The20000:
                        serializer.Serialize(writer, "2000.0");
                        return;
                    case WcsEquinoxEnum.B1950:
                        serializer.Serialize(writer, "B1950");
                        return;
                    case WcsEquinoxEnum.J200:
                        serializer.Serialize(writer, "J200");
                        return;
                    case WcsEquinoxEnum.J2000:
                        serializer.Serialize(writer, "J2000");
                        return;
                    case WcsEquinoxEnum.J20000:
                        serializer.Serialize(writer, "J2000.0");
                        return;
                }
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value.ToString());
                return;
            }
            throw new Exception("Cannot marshal type WcsEquinoxUnion");
        }

        public static readonly WcsEquinoxUnionConverter Singleton = new WcsEquinoxUnionConverter();
    }

    internal class WcsEquinoxEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(WcsEquinoxEnum) || t == typeof(WcsEquinoxEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case " ":
                    return WcsEquinoxEnum.Empty;
                case "2000.0":
                    return WcsEquinoxEnum.The20000;
                case "B1950":
                    return WcsEquinoxEnum.B1950;
                case "J200":
                    return WcsEquinoxEnum.J200;
                case "J2000":
                    return WcsEquinoxEnum.J2000;
                case "J2000.0":
                    return WcsEquinoxEnum.J20000;
            }
            throw new Exception("Cannot unmarshal type WcsEquinoxEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (WcsEquinoxEnum)untypedValue;
            switch (value)
            {
                case WcsEquinoxEnum.Empty:
                    serializer.Serialize(writer, " ");
                    return;
                case WcsEquinoxEnum.The20000:
                    serializer.Serialize(writer, "2000.0");
                    return;
                case WcsEquinoxEnum.B1950:
                    serializer.Serialize(writer, "B1950");
                    return;
                case WcsEquinoxEnum.J200:
                    serializer.Serialize(writer, "J200");
                    return;
                case WcsEquinoxEnum.J2000:
                    serializer.Serialize(writer, "J2000");
                    return;
                case WcsEquinoxEnum.J20000:
                    serializer.Serialize(writer, "J2000.0");
                    return;
            }
            throw new Exception("Cannot marshal type WcsEquinoxEnum");
        }

        public static readonly WcsEquinoxEnumConverter Singleton = new WcsEquinoxEnumConverter();
    }

    internal class WcsProjectionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(WcsProjection) || t == typeof(WcsProjection?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "AIT":
                    return WcsProjection.Ait;
                case "CAR":
                    return WcsProjection.Car;
                case "SIN":
                    return WcsProjection.Sin;
                case "TAN":
                    return WcsProjection.Tan;
            }
            throw new Exception("Cannot unmarshal type WcsProjection");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (WcsProjection)untypedValue;
            switch (value)
            {
                case WcsProjection.Ait:
                    serializer.Serialize(writer, "AIT");
                    return;
                case WcsProjection.Car:
                    serializer.Serialize(writer, "CAR");
                    return;
                case WcsProjection.Sin:
                    serializer.Serialize(writer, "SIN");
                    return;
                case WcsProjection.Tan:
                    serializer.Serialize(writer, "TAN");
                    return;
            }
            throw new Exception("Cannot marshal type WcsProjection");
        }

        public static readonly WcsProjectionConverter Singleton = new WcsProjectionConverter();
    }

    internal class WcsQualityConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(WcsQuality) || t == typeof(WcsQuality?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Full":
                    return WcsQuality.Full;
                case "Position":
                    return WcsQuality.Position;
            }
            throw new Exception("Cannot unmarshal type WcsQuality");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (WcsQuality)untypedValue;
            switch (value)
            {
                case WcsQuality.Full:
                    serializer.Serialize(writer, "Full");
                    return;
                case WcsQuality.Position:
                    serializer.Serialize(writer, "Position");
                    return;
            }
            throw new Exception("Cannot marshal type WcsQuality");
        }

        public static readonly WcsQualityConverter Singleton = new WcsQualityConverter();
    }
}
